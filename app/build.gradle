import com.android.ide.common.signing.KeytoolException

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

File debugKeyStoreFile, releaseKeyStoreFile

if (keystorePropertiesFile.canRead()) {
    // Load your keystore.properties file into the keystoreProperties object.
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    if (keystoreProperties != null) {
        debugKeyStoreFile = file(keystoreProperties['debugStoreFile'])
        releaseKeyStoreFile = file(keystoreProperties['releaseStoreFile'])
    }
} else {
    println '\'keystore.properties\' not found!'
}

static def getJenkinsBuildNumber() {
    def number = System.getenv("BUILD_NUMBER") as Integer ?: 0
    return number
}

android {
    signingConfigs {
        debug {
            if (keystoreProperties != null) {
                try {
                    if (debugKeyStoreFile != null && debugKeyStoreFile.canRead()) {
                        keyAlias keystoreProperties['debugKeyAlias']
                        keyPassword keystoreProperties['debugKeyPassword']
                        storeFile file(keystoreProperties['debugStoreFile'])
                        storePassword keystoreProperties['debugStorePassword']
                    }
                } catch (KeytoolException e) {
                    println '\'debug keystore\' not found! ' + e
                }
            }
        }
        release {
            if (keystoreProperties != null) {
                try {
                    if (releaseKeyStoreFile != null && releaseKeyStoreFile.canRead()) {
                        keyAlias keystoreProperties['releaseKeyAlias']
                        keyPassword keystoreProperties['releaseKeyPassword']
                        storeFile file(keystoreProperties['releaseStoreFile'])
                        storePassword keystoreProperties['releaseStorePassword']
                    }
                } catch (KeytoolException e) {
                    println '\'release keystore\' not found! ' + e
                }
            }
        }
    }
    buildToolsVersion '29.0.3'
    compileSdkVersion 29
    defaultConfig {
        applicationId "tw.tonyyang.englishwords"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "0.1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        project.ext.set("archivesBaseName", "englishwords_ver_" + versionName + "-" + getJenkinsBuildNumber())
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
                arguments = ["resourcePackageName": android.defaultConfig.applicationId]
            }
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix '-DEBUG'
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            debuggable false
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }
    viewBinding {
        enabled = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation("androidx.test.espresso:espresso-core:$rootProject.espresso_core_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation "androidx.appcompat:appcompat:$rootProject.appcompat_version"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constrantlayout_version"
    implementation "androidx.legacy:legacy-support-v13:$rootProject.legacy_support_v13_version"
    implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerview_version"

    // Room components
    implementation "androidx.room:room-runtime:$rootProject.room_version"
    kapt "androidx.room:room-compiler:$rootProject.room_version"
    implementation "androidx.room:room-ktx:$rootProject.room_version"
    androidTestImplementation "androidx.room:room-testing:$rootProject.room_version"

    // Kotlin components
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.kotlin_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.coroutines_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutines_version"

    // Material design
    implementation "com.google.android.material:material:$rootProject.material_version"

    // Testing
    testImplementation "junit:junit:$rootProject.junit_version"
    androidTestImplementation "junit:junit:$rootProject.junit_version"
    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.core_testing_version"

    // 3rd party libs
    implementation "org.slf4j:slf4j-api:$rootProject.slf4j_version"
    implementation "com.google.code.gson:gson:$rootProject.gson_version"
    implementation "com.squareup.okhttp3:okhttp:$rootProject.okhttp_version"
    implementation "com.nostra13.universalimageloader:universal-image-loader:$rootProject.imageloader_version"
    implementation "com.hedgehog.ratingbar:app:$rootProject.ratingbar_version"
    implementation "com.google.firebase:firebase-core:$rootProject.firebase_core_version"
    implementation "com.crashlytics.sdk.android:crashlytics:$rootProject.crashlytics_version"
    implementation "org.greenrobot:eventbus:$rootProject.eventbus_version"
    implementation "com.facebook.stetho:stetho:$rootProject.stetho_version"
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
    mavenLocal()
}

apply plugin: 'com.google.gms.google-services'