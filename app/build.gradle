import com.android.ide.common.signing.KeytoolException

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

File debugKeyStoreFile, releaseKeyStoreFile

if (keystorePropertiesFile.canRead()) {
    // Load your keystore.properties file into the keystoreProperties object.
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    if (keystoreProperties != null) {
        debugKeyStoreFile = file(keystoreProperties['debugStoreFile'])
        releaseKeyStoreFile = file(keystoreProperties['releaseStoreFile'])
    }
} else {
    println '\'keystore.properties\' not found!'
}

static def getJenkinsBuildNumber() {
    def number = System.getenv("BUILD_NUMBER") as Integer ?: 0
    return number
}

android {
    signingConfigs {
        debug {
            if (keystoreProperties != null) {
                try {
                    if (debugKeyStoreFile != null && debugKeyStoreFile.canRead()) {
                        keyAlias keystoreProperties['debugKeyAlias']
                        keyPassword keystoreProperties['debugKeyPassword']
                        storeFile file(keystoreProperties['debugStoreFile'])
                        storePassword keystoreProperties['debugStorePassword']
                    }
                } catch (KeytoolException e) {
                    println '\'debug keystore\' not found! ' + e
                }
            }
        }
        release {
            if (keystoreProperties != null) {
                try {
                    if (releaseKeyStoreFile != null && releaseKeyStoreFile.canRead()) {
                        keyAlias keystoreProperties['releaseKeyAlias']
                        keyPassword keystoreProperties['releaseKeyPassword']
                        storeFile file(keystoreProperties['releaseStoreFile'])
                        storePassword keystoreProperties['releaseStorePassword']
                    }
                } catch (KeytoolException e) {
                    println '\'release keystore\' not found! ' + e
                }
            }
        }
    }
    buildToolsVersion '30.0.3'
    compileSdkVersion 30
    defaultConfig {
        applicationId "tw.tonyyang.englishwords"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "0.2.3"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        project.ext.set("archivesBaseName", "englishwords_ver_" + versionName + "-" + getJenkinsBuildNumber())
        multiDexEnabled true
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix '-DEBUG'
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            debuggable false
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    buildFeatures {
        viewBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_core_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_android_version"

    // Android components
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.constraintlayout:constraintlayout:$constrantlayout_version"
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"
    implementation "androidx.viewpager2:viewpager2:$viewpager2_version"
    implementation "androidx.core:core-ktx:$ktx_core_version"
    implementation "androidx.fragment:fragment-ktx:$ktx_fragment_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$ktx_viewmodel_version"
    implementation "com.google.android.material:material:$material_version"

    // Room components
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    androidTestImplementation "androidx.room:room-testing:$room_version"

    // Testing
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "junit:junit:$junit_version"

    // 3rd party libs
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "dev.shreyaspatil.MaterialDialog:MaterialDialog:$material_dialog_version"

    // koin
    implementation "io.insert-koin:koin-core:$koin_version"
    implementation "io.insert-koin:koin-android:$koin_version"
    implementation "io.insert-koin:koin-androidx-scope:$koin_version"
    implementation "io.insert-koin:koin-androidx-viewmodel:$koin_version"
    implementation "io.insert-koin:koin-androidx-fragment:$koin_version"
}